Index: src/errCatch.c
===================================================================
--- src/errCatch.c	(revision 688)
+++ src/errCatch.c	(working copy)
@@ -1,7 +1,7 @@
 /* errCatch - help catch errors so that errAborts aren't
- * fatal, and warn's don't necessarily get printed immediately. 
+ * fatal, and warn's don't necessarily get printed immediately.
  * Note that error conditions caught this way will tend to
- * leak resources unless there are additional wrappers. 
+ * leak resources unless there are additional wrappers.
  *
  * Typical usage is
  * errCatch = errCatchNew();
@@ -10,7 +10,7 @@
  * errCatchEnd(errCatch);
  * if (errCatch->gotError)
  *     warn(errCatch->message->string);
- * errCatchFree(&errCatch); 
+ * errCatchFree(&errCatch);
  * cleanupFlakyStuff();
  */
 
@@ -88,10 +88,10 @@
     {
     errCatchEnd(errCatch);
     if (errCatch->gotError)
-	{
-	ok = FALSE;
-	warn(errCatch->message->string);
-	}
+    {
+    ok = FALSE;
+    warn("%s", errCatch->message->string);
+    }
     errCatchFree(pErrCatch);
     }
 return ok;
Index: src/htmlPage.c
===================================================================
--- src/htmlPage.c	(revision 688)
+++ src/htmlPage.c	(working copy)
@@ -1,4 +1,4 @@
-/* htmlPage - stuff to read, parse, and submit  htmlPages and forms. 
+/* htmlPage - stuff to read, parse, and submit  htmlPages and forms.
  *
  * typical usage is:
  *   struct htmlPage *page = htmlPageGet(url);
@@ -265,7 +265,7 @@
 return line;
 }
 
-static void tagVaWarn(struct htmlPage *page, struct htmlTag *tag, char *format, 
+static void tagVaWarn(struct htmlPage *page, struct htmlTag *tag, char *format,
 	va_list args)
 /* Print warning message and some context of tag. */
 {
@@ -272,7 +272,7 @@
 char context[80];
 strncpy(context, tag->start, sizeof(context));
 context[sizeof(context)-1] = 0;
-warn("Error near line %d of %s:\n %s", findLineNumber(page->htmlText, tag->start), 
+warn("Error near line %d of %s:\n %s", findLineNumber(page->htmlText, tag->start),
 	page->url, context);
 vaWarn(format, args);
 }
@@ -297,7 +297,7 @@
 }
 
 struct htmlStatus *htmlStatusParse(char **pText)
-/* Read in status from first line.  Update pText to point to next line. 
+/* Read in status from first line.  Update pText to point to next line.
  * Note unlike many routines here, this does not insert zeros into text. */
 {
 char *text = *pText;
@@ -336,7 +336,7 @@
 e = strchr(s, '\n');
 if (e == NULL)
     verbose(1, "End of file in header\n");
-else 
+else
     {
     *e = 0;
     if (e == s || e[-1] != '\r')
@@ -452,7 +452,7 @@
 }
 
 
-char *htmlTagAttributeVal(struct htmlPage *page, struct htmlTag *tag, 
+char *htmlTagAttributeVal(struct htmlPage *page, struct htmlTag *tag,
 	char *name, char *defaultVal)
 /* Return value of named attribute, or defaultVal if attribute doesn't exist. */
 {
@@ -476,7 +476,7 @@
 }
 
 static struct htmlTag *htmlTagScan(char *html, char *dupe)
-/* Scan HTML for tags and return a list of them. 
+/* Scan HTML for tags and return a list of them.
  * Html is the text to scan, and dupe is a copy of it
  * which this routine will insert 0's in in the course of
  * parsing.*/
@@ -521,7 +521,7 @@
 	       *e++ = 0;
 	    tagName = s;
 	    s = e;
-	    
+
 	    /* Allocate tag, fill in name, and stick it on list. */
 	    AllocVar(tag);
 	    tag->name = cloneString(tagName);
@@ -631,7 +631,7 @@
 return tagList;
 }
 
-static struct htmlFormVar *findOrMakeVar(struct htmlPage *page, char *name, 
+static struct htmlFormVar *findOrMakeVar(struct htmlPage *page, char *name,
 	struct hash *hash, struct htmlTag *tag, struct htmlFormVar **pVarList)
 /* Find variable of existing name if it exists,  otherwise
  * make a new one and add to hash and list.  Add reference
@@ -650,7 +650,7 @@
     {
     if (!sameWord(var->tagName, tag->name))
         {
-	tagWarn(page, tag, "Mixing FORM variable tag types %s and %s", 
+	tagWarn(page, tag, "Mixing FORM variable tag types %s and %s",
 		var->tagName, tag->name);
 	var->tagName = tag->name;
 	}
@@ -663,7 +663,7 @@
 /* Return TRUE if it's a type you can mix with others ok, like
  * button, submit, and image. */
 {
-return sameWord(type, "BUTTON") || sameWord(type, "SUBMIT") 
+return sameWord(type, "BUTTON") || sameWord(type, "SUBMIT")
 	|| sameWord(type, "IMAGE");
 }
 
@@ -676,10 +676,10 @@
 
 
 static struct htmlFormVar *formParseVars(struct htmlPage *page, struct htmlForm *form)
-/* Return a list of variables parsed out of form.  
+/* Return a list of variables parsed out of form.
  * A form variable is something that may appear in the name
  * side of the name=value pairs that serves as input to a CGI
- * script.  The variables may be constructed from buttons, 
+ * script.  The variables may be constructed from buttons,
  * INPUT tags, OPTION lists, or TEXTAREAs. */
 {
 struct htmlTag *tag;
@@ -703,7 +703,7 @@
 		tagWarn(page, tag, "Missing NAME attribute");
 	    varName = "n/a";
 	    }
-	var = findOrMakeVar(page, varName, hash, tag, &varList); 
+	var = findOrMakeVar(page, varName, hash, tag, &varList);
 	if (var->type != NULL && !sameWord(var->type, type))
 	    {
 	    if (!isMixableInputType(var->type) || !isMixableInputType(type))
@@ -710,7 +710,7 @@
 		tagWarn(page, tag, "Mixing input types %s and %s", var->type, type);
 	    }
 	var->type = type;
-	if (sameWord(type, "TEXT") || sameWord(type, "PASSWORD") 
+	if (sameWord(type, "TEXT") || sameWord(type, "PASSWORD")
 		|| sameWord(type, "FILE") || sameWord(type, "HIDDEN")
 		|| sameWord(type, "IMAGE"))
 	    {
@@ -742,7 +742,7 @@
         {
 	char *varName = htmlTagAttributeNeeded(page, tag, "NAME");
 	struct htmlTag *subTag;
-	var = findOrMakeVar(page, varName, hash, tag, &varList); 
+	var = findOrMakeVar(page, varName, hash, tag, &varList);
 	for (subTag = tag->next; subTag != form->endTag; subTag = subTag->next)
 	    {
 	    if (sameWord(subTag->name, "/SELECT"))
@@ -777,12 +777,12 @@
         {
 	char *varName = htmlTagAttributeNeeded(page, tag, "NAME");
 	char *e = strchr(tag->end, '<');
-	var = findOrMakeVar(page, varName, hash, tag, &varList); 
+	var = findOrMakeVar(page, varName, hash, tag, &varList);
 	if (e != NULL)
 	    var->curVal = cloneStringZ(tag->end, e - tag->end);
 	}
     }
-freeHash(&hash);    
+freeHash(&hash);
 slReverse(&varList);
 for (var = varList; var != NULL; var = var->next)
     {
@@ -847,7 +847,7 @@
 page->status = status;
 page->header = htmlHeaderRead(&s, &page->cookies);
 contentType = hashFindVal(page->header, "Content-Type:");
-if (contentType == NULL)	
+if (contentType == NULL)
     {
     warn("No contentType, assuming text/html");
     contentType = cloneString("text/html");
@@ -945,7 +945,7 @@
     page = htmlPageForwarded(url, cookies);
 errCatchEnd(errCatch);
 if (errCatch->gotError)
-    warn(errCatch->message->string);
+    warn("%s", errCatch->message->string);
 errCatchFree(&errCatch);
 return page;
 }
@@ -968,8 +968,8 @@
 /* Print out variable to file, prepending prefix. */
 {
 struct slName *val;
-fprintf(f, "%s%s\t%s\t%s\t%s\n", prefix, var->name, var->tagName, 
-	naForNull(var->type), 
+fprintf(f, "%s%s\t%s\t%s\t%s\n", prefix, var->name, var->tagName,
+	naForNull(var->type),
 	naForNull(var->curVal));
 for (val = var->values; val != NULL; val = val->next)
      fprintf(f, "%s\t%s\n", prefix, val->name);
@@ -1047,7 +1047,7 @@
 }
 
 static void asciiEntityDecode(char *in, char *out, int inLength)
-/* Decode from SGML Character Entity &# format to normal. 
+/* Decode from SGML Character Entity &# format to normal.
  * Out will be a little shorter than in typically, and
  * can be the same buffer. Only supports ASCII charset. */
 {
@@ -1072,7 +1072,7 @@
 		{
 		code = '?';
 		}
-	    if (code > 255) 
+	    if (code > 255)
 		{
 		code = '?';
 		}
@@ -1089,7 +1089,7 @@
 
 
 char *htmlExpandUrl(char *base, char *url)
-/* Expand URL that is relative to base to stand on its own. 
+/* Expand URL that is relative to base to stand on its own.
  * Return NULL if it's not http or https. */
 {
 struct dyString *dy = NULL;
@@ -1195,7 +1195,7 @@
 
 if (varType && sameWord(varType, "FILE"))
     {
-    fileName = strrchr(value,'/'); 
+    fileName = strrchr(value,'/');
     if (fileName)
 	++fileName;
     else
@@ -1221,7 +1221,7 @@
     while(bytesRead > 0);
     carefulClose(&f);
     }
-else    
+else
     dyStringAppend(dy, value);
 }
 
@@ -1260,7 +1260,7 @@
 return FALSE;
 }
 
-char *htmlFormCgiVars(struct htmlPage *page, struct htmlForm *form, 
+char *htmlFormCgiVars(struct htmlPage *page, struct htmlForm *form,
 	char *buttonName, char *buttonVal, struct dyString *dyHeader)
 /* Return cgi vars in name=val format from use having pressed
  * submit button of given name and value. */
@@ -1294,8 +1294,8 @@
 	appendCgiVar(dy, buttonName, buttonVal);
     for (var = form->vars; var != NULL; var = var->next)
 	{
-	if (sameWord(var->tagName, "SELECT") || 
-	    sameWord(var->tagName, "TEXTAREA") || 
+	if (sameWord(var->tagName, "SELECT") ||
+	    sameWord(var->tagName, "TEXTAREA") ||
 	    (var->type != NULL &&
 	    ((sameWord(var->type, "RADIO") || sameWord(var->type, "TEXTBOX")
 	    || sameWord(var->type, "PASSWORD") || sameWord(var->type, "HIDDEN")
@@ -1309,7 +1309,7 @@
 		++mimeParts;
 		appendMimeVar(dy, var->name, val, var->type, boundary);
 		}
-	    else	    
+	    else
 		appendCgiVar(dy, var->name, val);
 	    }
 	else if (var->type != NULL && sameWord(var->type, "CHECKBOX"))
@@ -1316,12 +1316,12 @@
 	    {
 	    if (var->curVal != NULL)
 		{
-		if (isMime)	    
+		if (isMime)
 		    {
 		    ++mimeParts;
 		    appendMimeVar(dy, var->name, var->curVal, var->type, boundary);
 		    }
-		else	    
+		else
 		    appendCgiVar(dy, var->name, var->curVal);
 		}
 	    }
@@ -1331,7 +1331,7 @@
 	    appendMimeVar(dy, buttonName, buttonVal, NULL, boundary);
 	    }
 	}
-    if (isMime) 
+    if (isMime)
 	{
 	++mimeParts;
 	appendMimeTerminus(dy,boundary);
@@ -1348,13 +1348,13 @@
 	    }
 	}
     break;
-    }   
-    
+    }
+
 return dyStringCannibalize(&dy);
 
 }
 
-struct htmlPage *htmlPageFromForm(struct htmlPage *origPage, struct htmlForm *form, 
+struct htmlPage *htmlPageFromForm(struct htmlPage *origPage, struct htmlForm *form,
 	char *buttonName, char *buttonVal)
 /* Return a new htmlPage based on response to pressing indicated button
  * on indicated form in origPage. */
@@ -1401,7 +1401,7 @@
 return newPage;
 }
 
-struct slName *htmlPageScanAttribute(struct htmlPage *page, 
+struct slName *htmlPageScanAttribute(struct htmlPage *page,
 	char *tagName, char *attribute)
 /* Scan page for values of particular attribute in particular tag.
  * if tag is NULL then scans in all tags. */
@@ -1442,7 +1442,7 @@
     int inTd;
     };
 
-struct htmlTable 
+struct htmlTable
 /* Data on a table. */
     {
     struct htmlTable *next;
@@ -1450,7 +1450,7 @@
     int rowCount;
     };
 
-static void validateTables(struct htmlPage *page, 
+static void validateTables(struct htmlPage *page,
 	struct htmlTag *startTag, struct htmlTag *endTag)
 /* Validate <TABLE><TR><TD> are all properly nested, and that there
  * are no empty rows. */
@@ -1516,7 +1516,7 @@
 #ifdef LEGAL_ACTUALLY
 	if (row->inTd)
 	    {
-	    tagAbort(page, tag, "<%s>...<%s> with no </%s> in between", 
+	    tagAbort(page, tag, "<%s>...<%s> with no </%s> in between",
 	    	tag->name, tag->name, tag->name);
 	    }
 #endif /* LEGAL_ACTUALLY */
@@ -1538,7 +1538,7 @@
     tagAbort(page, tag, "Missing </TABLE>");
 }
 
-static void checkTagIsInside(struct htmlPage *page, char *outsiders, char *insiders,  
+static void checkTagIsInside(struct htmlPage *page, char *outsiders, char *insiders,
 	struct htmlTag *startTag, struct htmlTag *endTag)
 /* Check that insiders are all bracketed by outsiders. */
 {
@@ -1625,12 +1625,12 @@
     checkNest(page, nesters[i], startTag, endTag);
 }
 
-static char *bodyNesters[] = 
+static char *bodyNesters[] =
 /* Nesting tags that appear in body. */
 {
     "ADDRESS", "DIV", "H1", "H2", "H3", "H4", "H5", "H6",
     "ACRONYM", "BLOCKQUOTE", "CITE", "CODE", "DEL", "DFN"
-    "DIR", "DL", "MENU", "OL", "UL", "CAPTION", "TABLE", 
+    "DIR", "DL", "MENU", "OL", "UL", "CAPTION", "TABLE",
     "A", "MAP", "OBJECT", "FORM"
 };
 
@@ -1662,10 +1662,10 @@
 checkTagIsInside(page, "DL", "DD DT", startTag, endTag);
 checkTagIsInside(page, "COLGROUP TABLE", "COL", startTag, endTag);
 checkTagIsInside(page, "MAP", "AREA", startTag, endTag);
-checkTagIsInside(page, "FORM SCRIPT", 
+checkTagIsInside(page, "FORM SCRIPT",
 	"INPUT BUTTON /BUTTON OPTION SELECT /SELECT TEXTAREA /TEXTAREA"
 	"FIELDSET /FIELDSET"
-	, 
+	,
 	startTag, endTag);
 validateNestingTags(page, startTag, endTag, bodyNesters, ArraySize(bodyNesters));
 return endTag->next;
